##############################################################
# Structure 
##############################################################

(This is very incomplete!)

court_position = {


	### Brief: skill
	# Skill associated with this court position.
	skill = learning

	### Brief: max_available_positions
	# How many positions can be hired in this position.
	max_available_positions = 2

	### Brief: minimum_rank
	# Minimum rank required to hire this court position. 
	# 	Defaults to county
	# 
	# NOTE: You'll want to run the highest_held_title_tier trigger in 
	#	valid_position in order to get this requirement localized. 
	minimum_rank = county/duchy/kingdom/empire 
	
	### Brief: opinion
	# Scripted value to determine the opinion modifier the employee gets
	# towards the liege while they hold this postion
	#
	# Supported scopes:
	# 		scope:liege (Character)
	#			Liege of the position
	#		scope:employee (Character)
	#			Courtier being considered for or holding the position
	opinion = {
		value = 20
		scope:liege = { ... }
		scope:employee = { ... }
	}
	
	### Brief: aptitude_level_breakpoints
 	# Breakpoints to increase aptitude level by 1. 
 	# 	Defaults to this if not set, as defined by DEFAULT_APTITUDE_LEVEL_BREAKPOINTS
	aptitude_level_breakpoints = { 20 40 60 80 }

	### Brief: aptitude
	# Scripted value to determine how well a character performs in this position. Aptitude are segmented into five
	# tiers: terrible, poor, average, good and excellent. Root scope is the courtier being evaluated.
	aptitude = {
		value = 1
		add = {
			value = learning
			multiply = 2
			desc = "#D Character's learning trait#!"
		}
		if = {
			limit = {
				has_trait = physician_1
			}
			add = 4
			desc = "#D Has Physician trait#!"
		}
	}

	### Brief: is_shown
	# Is this position even visible for usage? Root scope is liege character
	is_shown = {

	}

	### Brief: valid_position
	# Is this a valid position for this character to employ? Root scope is the liege character.
	valid_position = {

	}


	### Brief: is_shown_character
	# Is this character even shown for the position? Root scope is liege character
	#
	# Supported scopes:
	# 		scope:liege (Character)
	#			Liege of the position
	#
	#		scope:employee (Character)
	#			Courtier being considered for or holding the position
	is_shown_character = {

	}


	### Brief: valid_character
	# Is this a valid character for a position?
	# Also checks the scripted rule "is_eligible_for_court_positions" in code.
	# 
	# Supported scopes:
	# 		scope:liege (Character)
	#			Liege of the position
	#
	#		scope:employee (Character)
	#			Courtier being considered for or holding the position
	valid_character = {
		scope:liege = { ... }
		scope:employee = { ... }
	}

	### Brief: revoke_cost
	# How much it costs to revoke this position.
	revoke_cost = {
		prestige = minor_revoke_cost
	}

	### Brief: salary
	# How much it costs monthly to maintain this poisition.
	#
	# Supported scopes:
	#		scope:liege (Character)
	salary = {
		gold = {
			value = 1.0
			if = {
				limit = {
					exists = scope:liege
				}
				...
			}
		}
		prestige = {
			value = 1.0
			if = {
				limit = {
					exists = scope:liege
				}
				...
			}
		}
		piety = {
			value = 1.0
			if = {
				limit = {
					exists = scope:liege
				}
				...
			}
		}
	}

	### Brief: base_employer_modifier
	# Non-scaling modifiers gained by the employer of the court position.
	base_employer_modifier = { ... }

	### Brief: scaling_employer_modifiers
	# Scaling modifiers gained by the employer of the court position as the employee's aptitude level increases. Can 
	# define 0-5 scaling modifiers. If less than 5 are defined, the highest will be picked as aptitude level increases.
	#
	# ERRORS: 
	#		Will error if naming convention and indices aren't followed. 
	scaling_employer_modifiers = {		
		aptitude_level_1 = {
		  	...
		}
		aptitude_level_2 = {
		  	...
		}
		aptitude_level_3 = {
		  	...
		}
		aptitude_level_4 = {
		  	...
		}
		aptitude_level_5 = {
		  	...
		}
	}

	### Brief: custom_employer_modifier_description
	# Additional, verbose description of position's effect on the employer. 
	#
	# Example: 
	#		"Court Physician will preform medical proceedures for you."
	#
	# Note: 
	#		Will get moved into employer_modifier when clauswitz supports it. 
	custom_employer_modifier_description = "" 

	### Brief: modifier
	# Modifiers gained by the holder of the court position.
	modifier = { ... }

	### Brief: custom_employee_modifier_description
	# Additional, verbose description of position's effect on the employee. 
	# 
	# Example: 
	# 		"May get called upon to do medical proceedures for liege."
	#
	# Note: 
	#		Will get moved into modifier when clauswitz supports it. 
	custom_employee_modifier_description = "" 

	### Brief: search_for_courtier
	# Optional effect to search for a courtier for this position. Root scope is the liege character.
	search_for_courtier = { 

	} 

	### Brief: on_court_position_received/on_court_position_revoked/on_court_position_invalidated
	# Effects that happen when the position is appointed, revoked or invalidated.
	# 
	# Supported scopes:
	# 		scope:liege (Character)
	#			Liege of the position
	#
	#		scope:employee (Character)
	#			Courtier holding the position
	on_court_position_received = { 
		scope:liege = { ... }
		scope:employee = { ... }
	} 
	on_court_position_revoked = { 
		scope:liege = { ... }
		scope:employee = { ... }
	} 
	on_court_position_invalidated = { 
		scope:liege = { ... }
		scope:employee = { ... }
	} 

	### Brief: candidate_score
	# Scripted value to determine whether an AI will hire a position or not. Evaluated per eligible courtier/vassal. 
	# It is EXTREMELY important to avoid factors that depend on whether the person being evaluated is currently hired or not, as this will lead to hire and fire loops
	# This includes things like checking current expenses
	# Also avoid things that can fluctuate wildly (like current expenses) since that too can lead to firing
	# See court_position_liege_score_base_value for some comments on how this has been balanced
	# May hire courtier/vassal in position if score is above 0. Weighted random selection based on the highest score 
	# for all courtiers/vassals in all positions; eliminates anything below MIN_SCORE_RATIO_FOR_COURT_POSITION_HIRE 
	# % of top score. AI will begin firing holders that fall below MAX_SCORE_TO_FIRE_COURT_POSITION.
	#
	# Try to aim for 100 for when no positions are filled and no other conditions are affecting hiring decision. 
	# 
	# WARNING: 
	#	If not balanced properly, the AI WILL get stuck in a fire/hire loop. Check debug.log to verify how many 
	# 	positions are hired and fired within the last decade. Performance WILL suffer if the AI gets into a hire/fire
	# 	loop.
	#
	# Supported scopes:
	# 		scope:liege (Character)
	#			Liege considering the position
	#
	#		scope:employee (Character)
	#			Courtier being considered in the position
	#
	#		scope:firing_court_position (bool)
	#			For special considerations to hiring or firing the position. When true/set the position is being fired, 
	#			when false/not set the position is being hired.
	#
	#		scope:percent_of_monthly_gold_income (number)
	#			how much the position cost compared to the liege's monthly gold income in percent <0, infinity>. Does not take expenses into account! Will 
	#			be 100 if liege has no monthly income. 
	#
	#		scope:percent_of_positive_monthly_prestige_balance (number)
	#			how much the position cost compared to the liege's monthly prestige balance in percent <0, infinity>. 
	#			Will be 100 if liege has negative balance. 
	#
	#		scope:percent_of_positive_monthly_piety_balance (number)
	#			how much the position cost compared to the liege's monthly piety balance in percent <0, infinity>. Will 
	#			be 100 if liege has negative balance. 
	#
	#		scope:percent_of_monthly_gold_income_all_positions (number)
	#			how much all employed positions cost compared to the liege's monthly gold income in percent 
	#			<0, infinity>. Will be 100 if liege has no monthly income. When evaluating a new hire, their salary
	#			will be added to this value for calculation
	#
	#		scope:percent_of_positive_monthly_prestige_balance_all_positions (number)
	#			how much all employed positions cost compared to the liege's monthly balance income in percent 
	#			<0, infinity>. Will be 100 if liege has negative balance. When evaluating a new hire, their salary
	#			will be added to this value for calculation
	#
	#		scope:percent_of_positive_monthly_piety_balance_all_positions (number)
	#			how much all employed positions cost compared to the liege's monthly piety balance in percent 
	#			<0, infinity>. Will be 100 if liege has negative balance. When evaluating a new hire, their salary
	#			will be added to this value for calculation
	candidate_score = {
		value = 0

		scope:liege = { ... }
		scope:employee = { ... }
		if = {
			limit = {
				exists = scope:firing_court_position 
			}
			add = 50
		}

		subtract = {
			value = 40
			multiply = scope:percent_of_monthly_gold_income
		} 
		subtract = {
			value = 40
			multiply = scope:percent_of_monthly_prestige_income
		} 
		subtract = {
			value = 40
			multiply = scope:percent_of_monthly_piety_income
		} 

		subtract = {
			value = 40
			multiply = scope:percent_of_monthly_gold_income_all_positions
		} 
		subtract = {
			value = 40
			multiply = scope:percent_of_monthly_prestige_income_all_positions
		} 
		subtract = {
			value = 40
			multiply = scope:percent_of_monthly_piety_income_all_positions
		} 
	}
}

##############################################################
# Triggers 
##############################################################

# Scoped character holds any position
has_any_court_position                       		
	scope:my_character = {
    	has_any_court_position = yes
	}


# Scoped character employs any position
has_employed_any_court_position 					
	scope:my_character = {
    	has_employed_any_court_position = yes
	}


# Scoped character holds target court position
has_court_position  								
	scope:my_character = {
	    has_court_position = food_taster
	}


# Scoped character employs target court position
employs_court_position		 						
	scope:my_character = {
	    employs_court_position = food_taster
	}


# Scoped character can be employed as target court position, uses valid_character trigger
can_be_employed_as = court_position 				
	scope:my_character = {
	    can_be_employed_as = food_taster
	}


# Scoped character can employ target court position, uses valid_position trigger
can_employ_court_position_type 						
	scope:my_character = {
	    can_employ_court_position_type = food_taster
	}


# Trigger to check if the target character is the one employing the scoped character in a court position. 
	Errors if:
	- scoped character does not hold any court position
target_is_court_position_employer
	scope:my_character = {
	    is_court_position_employer = {
	        court_position = food_taster
	        who = root
	    }
	}


## Brief: aptitude
# Trigger to check the aptitude of the scoped character in target position
#		
#		value: [0,4] representing aptitude levels from terrible to excellent. See 00_court_position_values.txt for defined values 
aptitude
	scope:my_character = {
		aptitude = {
			court_position = food_taster
			value >= 2
		}
	}


# Scopes to all characters that currently employ the character in a court position (it can be more than one!)
x_court_position_employer
	scope:my_character = {
	    random/every/any_court_position_employer = {
	        
	    }
	}


# Scopes to all characters employed in a court position by the scoped character. Optional type scopes characters employed in target position instead.
x_court_position_holder
	scope:my_character = {
	    random/every/any_court_position_holder = {
	        type = food_taster # Optional
	    }
	}


##############################################################
# Effects 
##############################################################

# Appoints the target character in the target court position in the scoped character's court
scope:my_character = {
	appoint_court_position = {
		recipient = scope:receiving_character
		court_position = court_position_type
	}
}


# Revokes the target court position from the scoped character
scope:my_character = {
	revoke_court_position = court_position_type
}


# Replaces the target character holding in the target court position with target character in scoped character's court
scope::my_character = {
	replace_court_position = {
		recipient = scope:receiving_character
		holder = scope:character_holding_court_position
		court_position = court_position_type
	}
}


##############################################################
# Links 
##############################################################

## Brief: aptitude
# Gets the aptitude of the scoped character in target position type
aptitude
	scope::my_character.aptitude:food_taster

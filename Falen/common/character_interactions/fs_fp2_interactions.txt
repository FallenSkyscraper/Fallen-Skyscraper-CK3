incite_revolts_interaction = {
	interface_priority = 30
	category = interaction_category_hostile
	common_interaction = yes
	desc = incite_revolts_interaction_desc
	icon = faction

	greeting = positive

	auto_accept = yes

	cost = {
		gold = {
			add = {
				value = 0
				# Gold spent will provide 10x levies, e.g. 25 provides 250 - not automated yet
				if = {
					limit = { scope:small_investment_in_revolt = yes }
					add = 25
				}
				if = {
					limit = { scope:medium_investment_in_revolt = yes }
					add = 75
				}
				if = {
					limit = { scope:high_investment_in_revolt = yes }
					add = 200
				}
			}
		}
	}

	is_shown = {
		has_dlc_feature = the_fate_of_iberia
		NOT = { scope:recipient = scope:actor }
		# Only available during Opportunity, Hostility and Tension phases
		scope:actor = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
				has_struggle_phase_parameter = unlocks_incite_revolts_interaction
			}
		}
		# Can only target involved
		scope:recipient = {
			any_character_struggle = {
				involvement = involved
			}
		}
	}

	is_valid_showing_failures_only = {

		custom_description = {
			text = at_least_one_county_with_neutral_negative_opinion
			scope:recipient = {
				any_sub_realm_county = {
					count > 0
					holder = scope:recipient
					county_opinion < 0
					NOR = {
						has_county_modifier = small_investment_in_revolt_modifier
						has_county_modifier = medium_investment_in_revolt_modifier
						has_county_modifier = high_investment_in_revolt_modifier
					}
				}
			}
		}
	}

	# Small investment
	send_option = {
		flag = small_investment_in_revolt
		localization = small_investment
	}

	# Medium investment
	send_option = {
		flag = medium_investment_in_revolt
		localization = medium_investment
		starts_enabled = { always = yes	}
	}

	# High investment
	send_option = {
		flag = high_investment_in_revolt
		localization = high_investment
	}

	on_accept = {
		# Select the random county
		hidden_effect = {
			scope:recipient = {
				random_sub_realm_county = {
					limit = {
						NOR = {
							has_county_modifier = small_investment_in_revolt_modifier
							has_county_modifier = medium_investment_in_revolt_modifier
							has_county_modifier = high_investment_in_revolt_modifier
						}
						county_opinion < 0
						holder = scope:recipient
					}
					weight = {
						base = 1
						# More likely to finance county of your own Faith or Culture
						modifier = {
							add = 2
							OR = {
								faith = scope:actor.faith
								culture = scope:actor.culture
							}
						}
						# More likely to finance county prone to trigger populist factions
						modifier = {
							add = 5
							NAND = {
								faith = scope:recipient.faith
								culture = scope:recipient.culture
							}
						}
						# More likely to finance county bordering your Realm
						modifier = {
							add = 5
							any_neighboring_county = {
								holder = scope:actor
							}
						}
					}
					save_scope_as = chosen_county
				}
			}
		}

		scope:actor = {
			stress_impact = {
				just = medium_stress_impact_gain
				honest = medium_stress_impact_gain
				trusting = medium_stress_impact_gain
				greedy = minor_stress_impact_gain
			}
			if = {
				limit = {
					scope:actor = {
						OR = {
							has_relation_rival = scope:recipient
							has_relation_nemesis = scope:recipient
						}
					}
				}
				stress_impact = {
					vengeful = medium_stress_impact_loss
				}
			}
			if = {
				limit = {
					scope:actor = {
						is_vassal_of = scope:recipient
					}
				}
				stress_impact = {
					ambitious = medium_stress_impact_loss
				}
			}
		}

		# SP1 Polish (Hugo)
		scope:actor = {
			duel = {
				skill = intrigue
				value = scope:recipient.intrigue
			
				10 = { # Failure
					desc = incite_revolts_interaction_notif_failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -1.5
					}
					show_as_tooltip = {
						if = {
							limit = { scope:small_investment_in_revolt = yes }
							custom_tooltip = apply_small_investment_in_revolt_on_random_county
						}
						else_if = {
							limit = { scope:medium_investment_in_revolt = yes }
							custom_tooltip = apply_medium_investment_in_revolt_on_random_county
						}
						else_if = {
							limit = { scope:high_investment_in_revolt = yes }
							custom_tooltip = apply_high_investment_in_revolt_on_random_county
						}
						reverse_add_opinion = {
							target = scope:recipient
							modifier = angry_opinion
							opinion = -50
						}
					}

					hidden_effect = {
						send_interface_toast = {
							title = incite_revolts_interaction_result.tt
							left_icon = scope:chosen_county
							right_icon = scope:recipient
		
							scope:chosen_county = {
								if = {
									limit = { scope:small_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = small_investment_in_revolt_modifier
										years = 10
									}
								}
								else_if = {
									limit = { scope:medium_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = medium_investment_in_revolt_modifier
										years = 10
									}
								}
								else_if = {
									limit = { scope:high_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = high_investment_in_revolt_modifier
										years = 10
									}
								}
							}
							reverse_add_opinion = {
								target = scope:recipient
								modifier = angry_opinion
								opinion = -50
							}
							hidden_effect = {
								scope:recipient = {
									progress_towards_rival_effect = {
										CHARACTER = scope:actor
										REASON = fp2_progress_towards_rival_funded_revolt_against_me
										OPINION = 0
									}
								}
							}
						}
					}
				}
				10 = { # Success
					desc = incite_revolts_interaction_notif_success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 1.5
					}
						
					show_as_tooltip = {
						if = {
							limit = { scope:small_investment_in_revolt = yes }
							custom_tooltip = apply_small_investment_in_revolt_on_random_county
						}
						else_if = {
							limit = { scope:medium_investment_in_revolt = yes }
							custom_tooltip = apply_medium_investment_in_revolt_on_random_county
						}
						else_if = {
							limit = { scope:high_investment_in_revolt = yes }
							custom_tooltip = apply_high_investment_in_revolt_on_random_county
						}
					}

					hidden_effect = {
						send_interface_toast = {
							title = incite_revolts_interaction_result.tt
							left_icon = scope:chosen_county
		
							scope:chosen_county = {
								if = {
									limit = { scope:small_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = small_investment_in_revolt_modifier
										years = 10
									}
								}
								else_if = {
									limit = { scope:medium_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = medium_investment_in_revolt_modifier
										years = 10
									}
								}
								else_if = {
									limit = { scope:high_investment_in_revolt = yes }
									add_county_modifier = {
										modifier = high_investment_in_revolt_modifier
										years = 10
									}
								}
							}
						}
					}
				}
			}
		}
	}

	ai_frequency = 60

	ai_potential = {
		any_character_struggle = {
			involvement = involved
			OR = {
				is_struggle_phase = struggle_iberia_phase_opportunity
				is_struggle_phase = struggle_iberia_phase_hostility
			}
		}
		short_term_gold >= medium_gold_value
	}

	ai_targets = {
		# For the AI, we limit it to neighboring_rulers
		ai_recipients = neighboring_rulers
	}

	ai_will_do = {
		base = -50 # Let's limit it to specific character to avoid pure chaos

		###############
		## BASE
		###############

		# ai values
		modifier = {
			ai_vengefulness > 0
			add = ai_vengefulness
		}
		modifier = {
			add = {
				value = ai_compassion
				multiply = -1
			}
		}

		modifier = {
			add = {
				value = ai_honor
				multiply = -1
			}
		}

		# intrigue skill points
		modifier = {
			add = {
				value = intrigue
				multiply = 3
			}
		}

		# diff faith
		modifier = {
			add = 25
			NOT = { faith = scope:recipient.faith }
		}

		# diff culture
		modifier = {
			add = 25

			NOT = {
				culture = {
					OR = {
						this = scope:recipient.culture
						cultural_acceptance = { target = scope:recipient.culture value >= 90 }
					}
				}
			}
		}

		###############
		## TRAITS
		###############

		# schemer
		modifier = {
			add = 25
			has_trait = schemer
		}

		# intrigue education
		modifier = {
			add = 25
			OR = {
				has_trait = education_intrigue_1
				has_trait = education_intrigue_2
				has_trait = education_intrigue_3
				has_trait = education_intrigue_4
			}
		}

		################
		## RELATIONSHIP
		################

		# more likely to do it against rival or nemesis
		modifier = {
			add = 50
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
		}

		# boost against liege for Ambitious
		modifier = {
			add = 50
			scope:actor = {
				has_trait = ambitious
				is_vassal_of = scope:recipient
			}
		}

		# never target your friends
		modifier = {
			add = -1000
			scope:recipient = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
					has_relation_best_friend = scope:actor
				}
			}
		}
	}
}

contract_assistance_interaction = {
	category = interaction_category_diplomacy
	interface_priority = 15
	common_interaction = yes
	interface = interfere_in_war
	special_interaction = interfere_in_war_interaction
	popup_on_receive = yes
	pause_on_receive = yes

	ai_maybe = yes
	desc = contract_assistance_interaction_desc
	icon = icon_gold

	greeting = positive
	notification_text = contract_assistance_interaction_notification

	cooldown_against_recipient = { years = 5 }

	is_shown = {
		# Actor is Involved in Struggle
		scope:actor = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
				has_struggle_phase_parameter = unlocks_contract_assistance_interaction
			}
		}
		# Recipient is Involved in Struggle, at war, and not at war with Actor
		scope:recipient = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
				has_struggle_phase_parameter = unlocks_contract_assistance_interaction
			}
			is_at_war = yes
			NOR = {
				this = scope:actor
				is_at_war_with = scope:actor
			}
		}
	}

	has_valid_target = {
		exists = scope:target
	}

	has_valid_target_showing_failures_only = {
		scope:target = { is_war_leader = scope:recipient }
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			# Cannot demand gold from allies
			NOT = { is_allied_to = scope:actor }
		}

		# Recipient is not in (any) war against your liege(s)
		trigger_if = {
			limit = { exists = scope:actor.liege }
			custom_description = {
				text = join_war_interaction_recipient_warring_with_my_liege
				subject = scope:recipient
				scope:actor = {
					NOT = { any_liege_or_above = { is_at_war_with = scope:recipient } }
				}
			}
		}

		# Cannot join wars with raised armies
		scope:actor = { has_raised_armies = no }

		# Can only contract one war at a time
		custom_tooltip = {
			text = contract_assistance_war_already_contracted_tt
			scope:actor = { NOT = { has_variable = owed_contract_assistance_war } }
		}
	}
	
	can_be_picked = {
		# Recipient is war leader in chosen war
		scope:target = {
			is_war_leader = scope:recipient
			# not already in target war
			custom_description = {
				text = join_war_interaction_already_in_target_war
				NOR = {
					any_war_attacker = { this = scope:actor }
					any_war_defender = { this = scope:actor }
				}
			}
		}
		# Liege checks
		can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:recipient JOINER = scope:actor }
	}

	on_accept = {
		# Add Actor to Recipient's war
		scope:target = {
			hidden_effect = { set_called_to = scope:actor }
			if = {
				limit = { is_attacker = scope:recipient }
				add_attacker = scope:actor
			}
			else = { add_defender = scope:actor }
		}
		# Actor effects
		scope:actor = {
			save_scope_as = contract_assistance_helper
			set_variable = {
				name = owed_contract_assistance_war
				value = scope:target
			}
			set_variable = {
				name = owed_contract_assistance_contribution
				value = offer_assistance_interaction_war_contribution_value
			}
			set_variable = {
				name = owed_contract_assistance_gold
				value = offer_assistance_interaction_gold_value
			}
			stress_impact = {
				craven = medium_stress_impact_gain
				shy = minor_stress_impact_gain
			}

			# Struggle Catalyst
			if = {
				limit = {
					# Verify if vassal used to be independent
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_join_war_as_assisant
							CHAR = scope:recipient
						}
					}
				}
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_join_war_as_assisant
							CHAR = scope:recipient
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_join_war_as_assisant
						character = scope:actor
					}
				}
			}
		}
		# Recipient effects
		scope:recipient = {
			stress_impact = {
				greedy = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
			custom_tooltip = contract_assistance_interaction_condition_tt
			show_as_tooltip = {
				pay_short_term_gold = {
					target = scope:actor
					gold = offer_assistance_interaction_gold_value
				}
			}
		}
	}

	on_decline = {
		# Refusal notification
		scope:actor = { trigger_event = char_interaction.0236 }
	}
	
	ai_accept = {
		base = 0 # Reluctant to spend money without good reason
		# Recipient already winning war
		modifier = {
			add = -50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_winning_trigger = yes }
			}
			trigger_else = {
				any_character_war = {
					count = all # So predicted negative modifiers are treated seperately
					fp2_struggle_contract_assistance_war_winning_trigger = yes
				}
			}
			desc = OA_AI_WINNING_WAR_REASON
		}
		# Recipient losing war
		modifier = {
			add = 50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_losing_trigger = yes }
			}
			trigger_else = {
				any_character_war = { fp2_struggle_contract_assistance_war_losing_trigger = yes }
			}
			desc = OA_AI_LOSING_WAR_REASON
		}
		# Recipient already significantly outnumbers enemy
		modifier = {
			add = -50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_outnumbering_trigger = yes }
			}
			trigger_else = {
				any_character_war = {
					count = all # So predicted negative modifiers are treated seperately
					fp2_struggle_contract_assistance_war_outnumbering_trigger = yes
				}
			}
			desc = OA_AI_OUTNUMBER_ENEMY_REASON
		}
		# Recipient is outnumbered
		modifier = {
			add = 50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					fp2_struggle_contract_assistance_war_outnumbered_minor_trigger = yes
					NOT = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
				}
			}
			trigger_else = {
				any_character_war = {
					fp2_struggle_contract_assistance_war_outnumbered_minor_trigger = yes
					NOT = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
				}
			}
			desc = OA_AI_OUTNUMBERED_MINOR_REASON
		}
		# Recipient is very outnumbered
		modifier = {
			add = 125
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
			}
			trigger_else = {
				any_character_war = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
			}
			desc = OA_AI_OUTNUMBERED_REASON
		}
		# Recipient has low cash
		modifier = {
			add = {
				value = -50
				if = {
					limit = {
						gold < 0
					}
					add = -100
				}
				if = {
					limit = {
						debt_level >= 2
					}
					add = -200
				}
				if = { # Very generous or vengeful characters *will* make poor decisions
					limit = {
						OR = {
							ai_greed <= -50
							ai_vengefulness >= 50
						}
					}
					multiply = 0.5
				}
			}
			gold < offer_assistance_interaction_gold_value
			desc = OA_AI_CANNOT_AFFORD_REASON
		}
		# Recipient has a lot of cash
		modifier = {
			add = {
				value = 25
				if = {
					limit = {
						gold >= {
							value = offer_assistance_interaction_gold_value
							multiply = 2
						}
					}
					add = 50
				}
				if = {
					limit = {
						gold >= {
							value = offer_assistance_interaction_gold_value
							multiply = 3
						}
					}
					add = 50
				}
			}
			gold >= offer_assistance_interaction_gold_value
			desc = OA_AI_EXTRA_GOLD_REASON
		}
		# Actor's troops would be little help
		modifier = {
			add = -50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_insufficient_trigger = yes }
			}
			trigger_else = {
				any_character_war = {
					count = all # So predicted negative modifiers are treated seperately
					fp2_struggle_contract_assistance_war_insufficient_trigger = yes
				}
			}
			desc = OA_AI_FEW_TROOPS_REASON
		}
		# Recipient is fighting a defensive war
		modifier = {  
			add = 25
			trigger_if = {
				limit = { exists = scope:target }
				scope:target.casus_belli.primary_defender = scope:recipient
			}
			trigger_else = {
				scope:recipient = {
					any_character_war = { primary_defender = scope:recipient }
				}
			}
			desc = OA_AI_DEFENSIVE_WAR_REASON
		}
		# Recipient is not interested in help for certain wars
		modifier = {  
			add = -300
			exists = scope:target
			scope:target = {
				OR = {
					using_cb = peasant_war
					using_cb = fp2_border_raid
				}
			}
			desc = OA_AI_UNINTERESTED_WAR_REASON
		}
		modifier = {
			add = {
				value = scope:actor.martial
				multiply = 2
			}
			scope:actor = { martial >= 12 }
			desc = OA_AI_MARTIAL_REASON
		}
		modifier = {
			add = -50
			scope:actor = { has_character_flag = fp2_contract_assistance_failure }
			desc = OA_AI_FAILURE_REASON
		}
		# Opinion Factor
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}

		modifier = {
			add = {
				value = ai_greed
				multiply = -0.2
			}
			ai_greed <= 0.5
			desc = AI_VALUE_MODIFIER_GREED
		}

		modifier = {
			add = {
				value = ai_boldness
				multiply = -0.2
			}
			NOT = { ai_boldness = 0 }
			desc = AI_VALUE_MODIFIER_BOLDNESS
		}

		# Allegiances
		# fp2_contracting_ally_modifier = {
		# 	WARMONGER = scope:recipient
		# 	WARJOINER = scope:actor
		# }
	}

	ai_potential = {
		is_imprisoned = no
		is_at_war = no
		ai_boldness >= -25
	}
	ai_target_quick_trigger = { adult = yes }
	ai_targets = {
		ai_recipients = neighboring_rulers
	}

	ai_set_target = {
		scope:recipient = {
			ordered_character_war = { #We offer our services for the war where the character is losing the most
				limit = {
					is_war_leader = prev
					NOR = {
						any_war_attacker = { this = scope:actor }
						any_war_defender = { this = scope:actor }
					}
					save_temporary_scope_as = target
					can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:recipient JOINER = scope:actor }
				}
				order_by = {
					value = 0
					add = {
						if = {
							limit = { any_war_attacker = { this = scope:recipient } }
							subtract = attacker_war_score
						}
						else = {
							subtract = defender_war_score
						}
					}
				}
				save_scope_as = target
			}
		}
	}
	
	ai_targets = {
		ai_recipients = peer_vassals
	}
	ai_frequency = 24 # We need a quite high frequency as wars do not last forever

	ai_will_do = {
		base = 0

		modifier = { # Increase chance if recipient is losing a war
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_losing_trigger = yes }
			}
			add = 25
		}
		
		modifier = { # Increase chance with amount of gold of recipient over interaction cost
			factor = offer_assistance_interaction_gold_modifier_value
		}

		modifier = { # Increase chance if likes recipient more than enemy
			scope:actor = {
				save_temporary_opinion_value_as = {
					name = contract_assistance_actor_opinion
					target = scope:recipient
				}
			}
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					any_war_participant = {
						is_leader_in_war = scope:target
						NOT = { this = scope:recipient }
						reverse_opinion = {
							target = scope:actor
							value < scope:contract_assistance_actor_opinion
						}
					}
				}
			}
			add = 25
		}

		modifier = { # Increase chance for family
			scope:recipient = {
				OR = {
					dynasty = scope:actor.dynasty
					is_consort_of = scope:actor
				}
			}
			add = 25
		}

		modifier = { # Decrease chance if army is small
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_insufficient_trigger = yes }
			}
			add = -50
		}

		modifier = { # Increase chance for rivalry
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					any_war_participant = {
						is_leader_in_war = scope:target
						NOT = { this = scope:recipient }
						has_relation_rival = scope:actor
					}
				}
			}
			add = 25
		}

		# Higher chance to target a human player
		modifier = {
			scope:recipient = { is_ai = no }
			factor = 2
		}
	}
}

request_contract_assistance_interaction = {
	category = interaction_category_diplomacy
	interface_priority = 15
	common_interaction = yes
	interface = call_ally
	special_interaction = call_ally_interaction
	popup_on_receive = yes
	pause_on_receive = yes

	ai_maybe = yes
	desc = request_contract_assistance_interaction_desc
	icon = icon_gold

	greeting = positive
	notification_text = request_contract_assistance_interaction_notification

	cooldown_against_recipient = { years = 5 }

	is_shown = {
		# Actor is Involved in Struggle
		scope:actor = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
				has_struggle_phase_parameter = unlocks_contract_assistance_interaction
			}
			is_at_war = yes
			NOR = {
				this = scope:recipient
				is_at_war_with = scope:recipient
			}
		}
		# Recipient is Involved in Struggle, at war, and not at war with Actor
		scope:recipient = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
				has_struggle_phase_parameter = unlocks_contract_assistance_interaction
			}
		}
	}

	has_valid_target = {
		exists = scope:target
	}

	has_valid_target_showing_failures_only = {
		scope:target = { is_war_leader = scope:actor }
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			# Cannot demand gold from allies
			NOT = { is_allied_to = scope:actor }
		}

		# Actor is not in (any) war against Recipient's liege(s)
		trigger_if = {
			limit = { exists = scope:recipient.liege }
			custom_description = {
				text = join_war_interaction_recipient_warring_with_my_liege
				subject = scope:actor
				scope:recipient = {
					NOT = {
						any_liege_or_above = { is_at_war_with = scope:actor }
					}
				}
			}
		}

		# Cannot join wars with raised armies
		scope:recipient = { has_raised_armies = no }

		# Can only contract one war at a time
		custom_tooltip = {
			text = contract_assistance_war_already_contracted_tt
			scope:recipient = {
				NOT = { has_variable = owed_contract_assistance_war }
			}
		}
	}

	can_be_picked = {
		# Recipient is war leader in chosen war
		scope:target = {
			is_war_leader = scope:actor
			# not already in target war
			custom_description = {
				text = join_war_interaction_already_in_target_war
				NOR = {
					any_war_attacker = { this = scope:recipient }
					any_war_defender = { this = scope:recipient }
				}
			}
		}
		# Liege checks
		can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:actor JOINER = scope:recipient }
	}

	on_accept = {
		# Add Actor to Recipient's war
		scope:target = {
			hidden_effect = { set_called_to = scope:recipient }
			if = {
				limit = { is_attacker = scope:actor }
				add_attacker = scope:recipient
			}
			else = { add_defender = scope:recipient }
		}
		# Actor effects
		scope:recipient = {
			save_scope_as = contract_assistance_helper
			set_variable = {
				name = owed_contract_assistance_war
				value = scope:target
			}
			set_variable = {
				name = owed_contract_assistance_contribution
				value = offer_assistance_interaction_war_contribution_value
			}
			set_variable = {
				name = owed_contract_assistance_gold
				value = offer_assistance_interaction_gold_value
			}
			stress_impact = {
				craven = medium_stress_impact_gain
				shy = minor_stress_impact_gain
			}


			# Struggle Catalyst
			if = {
				limit = {
					# Verify if vassal used to be independent
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_join_war_as_assisant
							CHAR = scope:recipient
						}
					}
				}
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_join_war_as_assisant
							CHAR = scope:recipient
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_join_war_as_assisant
						character = scope:recipient
					}
				}
			}
		}
		# Recipient effects
		scope:actor = {
			stress_impact = {
				greedy = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
			custom_tooltip = request_contract_assistance_interaction_condition_tt
			show_as_tooltip = {
				pay_short_term_gold = {
					target = scope:recipient
					gold = offer_assistance_interaction_gold_value 
				}
			}
		}
	}

	on_decline = {
		# Refusal notification
		scope:actor = { trigger_event = char_interaction.0236 }
	}

	ai_accept = {
		base = 0 # Reluctant to spend money without good reason

		# Recipient has low cash
		modifier = {
			add = {
				value = 25
				if = {
					limit = {
						gold < 0
					}
					add = {
						value = 25
						multiply = debt_level
					}
				}
				if = { # Very generous or vengeful characters *will* make poor decisions
					limit = {
						OR = {
							ai_greed <= -50
							ai_vengefulness >= 50
						}
					}
					multiply = 0.5
				}
			}
			desc = AI_VALUE_MODIFIER_GREED
		}
		# Recipient has a lot of cash
		modifier = {
			add = {
				value = -25
				if = {
					limit = {
						gold >= {
							value = offer_assistance_interaction_gold_value
							multiply = 2
						}
					}
					add = -50
				}
				if = {
					limit = {
						gold >= {
							value = offer_assistance_interaction_gold_value
							multiply = 3
						}
					}
					add = -50
				}
			}
			gold >= offer_assistance_interaction_gold_value
			desc = OA_AI_EXTRA_GOLD_REASON
		}
		# Recipient is not interested in help for certain wars
		modifier = {
			add = -500
			exists = scope:target
			scope:target = {
				OR = {
					using_cb = peasant_war
					using_cb = fp2_border_raid
				}
			}
			desc = OA_AI_UNINTERESTED_WAR_REASON
		}
		modifier = {
			add = {
				value = scope:actor.martial
				multiply = 2
			}
			scope:actor = { martial >= 12 }
			desc = OA_AI_MARTIAL_REASON
		}
		modifier = {
			add = -50
			scope:recipient = { has_character_flag = fp2_contract_assistance_failure }
			desc = OA_AI_FAILURE_REASON
		}
		# Opinion Factor
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}

		modifier = {
			add = {
				value = ai_greed
				multiply = 0.2
			}
			ai_greed <= 0.5
			desc = AI_VALUE_MODIFIER_GREED
		}

		modifier = {
			add = {
				value = ai_boldness
				multiply = 0.2
			}
			NOT = { ai_boldness = 0 }
			desc = AI_VALUE_MODIFIER_BOLDNESS
		}

		# Allegiances
		fp2_contracting_ally_modifier = {
			WARMONGER = scope:actor
			WARJOINER = scope:recipient
		}
	}

	ai_potential = {
		# the AI cannot use it for now so let's block it
		is_imprisoned = no
		is_at_war = no
		gold >= ai_war_chest_desired_gold_value
	}
	ai_target_quick_trigger = { adult = yes }
	ai_targets = {
		ai_recipients = neighboring_rulers
	}

	ai_set_target = {
		scope:actor = {
			ordered_character_war = { #We offer our services for the war where the character is losing the most
				limit = {
					is_war_leader = prev
					NOR = {
						any_war_attacker = { this = scope:recipient }
						any_war_defender = { this = scope:recipient }
					}
					save_temporary_scope_as = target
					can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:actor JOINER = scope:recipient }
				}
				order_by = {
					value = 0
					add = {
						if = {
							limit = { any_war_attacker = { this = scope:actor } }
							subtract = attacker_war_score
						}
						else = {
							subtract = defender_war_score
						}
					}
				}
				save_scope_as = target
			}
		}
	}

	ai_targets = {
		ai_recipients = peer_vassals
	}
	ai_frequency = 36

	ai_will_do = {
		base = 0

		modifier = { # AI is losing the war
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					trigger_if = {
						limit = {
							scope:actor = { is_attacker_in_war = prev }
						}
						defender_war_score >= offer_assistance_interaction_already_losing_value
					}
					trigger_else = { attacker_war_score >= offer_assistance_interaction_already_losing_value }
				}
			}
			add = 15
		}

		modifier = { # Increase chance for asking family
			scope:recipient = {
				OR = {
					dynasty = scope:actor.dynasty
					is_consort_of = scope:actor
				}
			}
			factor = 2
		}

		modifier = { # Decrease chance if army is small
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					trigger_if = {
						limit = {
							scope:recipient = { is_attacker_in_war = prev }
						}
						scope:actor.max_military_strength < war_defender_total_strength_divided_value
					}
					trigger_else = { scope:actor.max_military_strength < war_attacker_total_strength_divided_value }
				}
			}
			add = -50
		}

		modifier = { # Increase chance for rivalry
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					any_war_participant = {
						is_leader_in_war = scope:target
						NOT = { this = scope:actor }
						has_relation_rival = scope:recipient
					}
				}
			}
			add = 25
		}

		modifier = { # AI is extremely rich
			short_term_gold >= ai_war_chest_desired_gold_value
			add = 50
		}
	}
}

enforce_truce_interaction = {
	category = interaction_category_diplomacy
	interface_priority = 30
	common_interaction = yes
	interface = interfere_in_war
	special_interaction = interfere_in_war_interaction
	popup_on_receive = yes
	desc = enforce_truce_interaction_desc
	icon = icon_retreat

	greeting = positive
	notification_text = enforce_truce_interaction_notification

	cooldown = { years = 5 }

	is_shown = {
		OR = {
			# During the Struggle
			AND = {
				scope:actor = {
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_enforce_truces_interaction

					}
					primary_title.tier >= tier_duchy
				}
				scope:recipient = {
					any_character_struggle = {
						involvement = involved
						has_struggle_phase_parameter = unlocks_enforce_truces_interaction

					}
					tier_difference = {
						target = scope:actor
						value <= 0
					}
				}
			}
			# Comrpomise ending
			AND = {
				scope:actor = {
					primary_title.tier >= tier_duchy
					exists = house
					house = {
						has_house_modifier = fp2_struggle_compromise_house_reward_modifier
					}
				}
				scope:recipient = { # Primary title in Iberia
					exists = house
					house = {
						has_house_modifier = fp2_struggle_compromise_house_reward_modifier
					}
					tier_difference = {
						target = scope:actor
						value <= 0
					}
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			is_at_war = yes
			trigger_if = {
				limit = {
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							is_struggle_type = juche_struggle
						}
					}
				}
				any_character_struggle = {
					involvement = involved
					is_struggle_type = juche_struggle
					has_struggle_phase_parameter = unlocks_enforce_truces_interaction
				}
			}
			trigger_else = {
				exists = house
				house = {
					has_house_modifier = fp2_struggle_compromise_house_reward_modifier
				}
			}

			custom_tooltip = {
				text = fp2_enforce_truce_liege_or_independent_tt
				OR = {
					is_independent_ruler = yes
					top_liege = scope:actor.top_liege
					any_character_war = {
						primary_attacker = {
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
							OR = {
								is_independent_ruler = yes
								top_liege = scope:actor.top_liege
							}
						}
					}
					any_character_war = {
						primary_defender = {
							NOR = {
								this = scope:recipient
								this = scope:actor
							}
							OR = {
								is_independent_ruler = yes
								top_liege = scope:actor.top_liege
							}
						}
					}
				}
			}
		}
	}
	
	can_be_picked = {
		# Recipient is war leader in chosen war
		exists = scope:target
		scope:target = {
			is_war_leader = scope:recipient
			is_civil_war = no
			NOT = { using_cb = fp2_border_raid }
			trigger_if = {
				limit = {
					scope:recipient = {
						any_character_struggle = {
							involvement = involved
						}
					}
				}
				trigger_if = {
					limit = { primary_attacker = scope:recipient }
					primary_defender = { fp2_struggle_enforce_truce_war_leader_trigger = yes }
				}
				trigger_else = {
					primary_attacker = { fp2_struggle_enforce_truce_war_leader_trigger = yes }
				}
			}
			trigger_else = {
				scope:recipient = {
					capital_county.title_province = { geographical_region = world_europe_west_iberia }
				}
			}

		}
	}

	on_accept = {
		# End war and apply opinion/stress
		if = {
			limit = { exists = scope:target }
			scope:target = {
				primary_attacker = { save_scope_as = truce_1 }
				primary_defender = { save_scope_as = truce_2 }
			}
			show_as_tooltip = {
				scope:truce_1 = { add_prestige = minor_prestige_loss }
				scope:truce_2 = { add_prestige = minor_prestige_loss }
			}
			scope:actor = {
				fp2_enforce_truce_opinion_effect = yes
				# Best format for interaction interface
				show_as_tooltip = {
					scope:truce_1 = {
						add_truce_one_way = {
							character = scope:truce_2
							years = fp2_enforce_truce_duration_value
							name = TRUCE_ENFORCE_TRUCE
						}
					}
					scope:truce_2 = {
						add_truce_one_way = {
							character = scope:truce_1
							years = fp2_enforce_truce_duration_value
							name = TRUCE_ENFORCE_TRUCE
						}
					}
				}
				custom_tooltip = fp2_enforce_truce_peacemaker_tt
				hidden_effect = {
					add_truce_one_way = {
						character = scope:target.primary_attacker
						years = fp2_enforce_truce_duration_value
						name = TRUCE_ENFORCE_TRUCE
					}
					add_truce_one_way = {
						character = scope:target.primary_defender
						years = fp2_enforce_truce_duration_value
						name = TRUCE_ENFORCE_TRUCE
					}
					# Best format for toast
					send_interface_message = {
						type = msg_truce_enforced
						title = enforce_truce_interaction_actor_toast
						left_icon = scope:truce_1
						right_icon = scope:truce_2
						show_as_tooltip = { fp2_enforce_truce_opinion_effect = yes }
						custom_tooltip = fp2_enforce_truce_other_tt
						custom_tooltip = fp2_enforce_truce_peacemaker_tt
						goto = scope:recipient.primary_title
					}
				}
			}
			hidden_effect = {
				scope:truce_1 = {
					send_interface_message = {
						type = msg_truce_enforced
						title = enforce_truce_interaction_toast
						left_icon = scope:actor
						right_icon = scope:truce_2
						add_prestige = minor_prestige_loss
						show_as_tooltip = {
							scope:target = { end_war = white_peace }
							add_truce_both_ways = {
								character = scope:truce_2
								years = fp2_enforce_truce_duration_value
								name = TRUCE_ENFORCE_TRUCE
							}
							scope:actor = {
								add_truce_one_way = {
									character = scope:truce_1
									years = fp2_enforce_truce_duration_value
									name = TRUCE_ENFORCE_TRUCE
								}
							}
						}
						stress_impact = {
							wrathful = minor_stress_impact_gain
							brave = minor_stress_impact_gain
							ambitious = minor_stress_impact_gain
						}
					}
				}
				scope:truce_2 = {
					send_interface_message = {
						type = msg_truce_enforced
						title = enforce_truce_interaction_toast
						left_icon = scope:actor
						right_icon = scope:truce_1
						add_prestige = minor_prestige_loss
						show_as_tooltip = {
							scope:target = { end_war = white_peace }
							add_truce_both_ways = {
								character = scope:truce_1
								years = fp2_enforce_truce_duration_value
								name = TRUCE_ENFORCE_TRUCE
							}
							scope:actor = {
								add_truce_one_way = {
									character = scope:truce_2
									years = fp2_enforce_truce_duration_value
									name = TRUCE_ENFORCE_TRUCE
								}
							}
						}
						stress_impact = {
							wrathful = minor_stress_impact_gain
							brave = minor_stress_impact_gain
							ambitious = minor_stress_impact_gain
						}
					}
				}
			}
			scope:target = { end_war = white_peace }
			if = {
				limit = {
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_truce_was_enforced
								CHAR = scope:target
							}
						}
					}
				}
				every_character_struggle = {
					involvement = involved
					activate_struggle_catalyst = {
						catalyst = catalyst_truce_was_enforced
						character = scope:actor
					}
				}

			}
		}
	}

	on_decline = {
		# Refusal notification
		scope:actor = { trigger_event = char_interaction.0236 }
	}

	ai_accept = {
		base = -50 # Reluctant to end war without reason
		# Recipient only just begun
		modifier = {
			add = -25
			trigger_if = {
				limit = { exists = scope:target }
				scope:target.war_days < 180
			}
			trigger_else = { always = no }
			desc = ET_AI_WAR_NEW_REASON
		}
		# Recipient drags on
		modifier = {
			add = 25
			trigger_if = {
				limit = { exists = scope:target }
				scope:target.war_days > 1095
			}
			trigger_else = { always = no }
			desc = ET_AI_WAR_OLD_REASON
		}
		# Recipient is defender
		modifier = {
			add = 25
			trigger_if = {
				limit = { exists = scope:target }
				scope:recipient = scope:target.primary_defender
			}
			trigger_else = { always = no }
			desc = OA_AI_DEFENSIVE_WAR_REASON
		}
		# Recipient drags on
		modifier = {
			add = 25
			scope:recipient = { is_allied_to = scope:actor }
			desc = ET_AI_ALLY_REASON
		}
		# Recipient is vassal
		modifier = {
			add = 25
			scope:recipient = { target_is_liege_or_above = scope:actor }
			desc = ET_AI_LIEGE_REASON
		}
		# Recipient is losing
		modifier = {
			add = 25
			trigger_if = {
				limit = { exists = scope:target }
				trigger_if = {
					limit = { scope:recipient = scope:target.primary_defender }
					scope:target = { attacker_war_score >= fp2_enforce_truce_war_score_value }
				}
				trigger_else = {
					scope:target = { defender_war_score >= fp2_enforce_truce_war_score_value }
				}
			}
			trigger_else = { always = no }
			desc = OA_AI_LOSING_WAR_REASON
		}
		# Recipient is very outnumbered
		modifier = {
			add = 25
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
			}
			trigger_else = {
				any_character_war = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
			}
			desc = OA_AI_OUTNUMBERED_REASON
		}
		# Recipient is very outnumbered
		modifier = {
			add = -25
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_outnumbering_trigger = yes }
			}
			trigger_else = {
				any_character_war = { fp2_struggle_contract_assistance_war_outnumbering_trigger = yes }
			}
			desc = OA_AI_OUTNUMBER_ENEMY_REASON
		}
		# Actor cannot enforce truce
		modifier = {
			add = -50
			trigger_if = {
				limit = { exists = scope:target }
				OR = {
					war_attacker_total_strength_halved_value > scope:actor.max_military_strength
					war_defender_total_strength_halved_value > scope:actor.max_military_strength
				}
			}
			trigger_else = { always = no }
			desc = ET_AI_SMALL_ARMY_REASON
		}
		# Recipient holy war
		modifier = {
			add = -25
			trigger_if = {
				limit = { exists = scope:target }
				scope:recipient = {
					NOT = { has_trait = cynical }
				}
				scope:target = {
					OR = {
						using_cb = minor_religious_war
						using_cb = religious_war
						using_cb = major_religious_war
					}
				}
			}
			trigger_else = { always = no }
			desc = ET_AI_HOLY_WAR_REASON
		}
		# Actor is religious head
		modifier = {
			add = 25
			scope:recipient.faith.religious_head = scope:actor
			desc = ET_AI_HOF_REASON
		}
		# Dynasty head
		modifier = {
			add = 50
			scope:recipient.dynasty.dynast = scope:actor
			desc = ET_AI_DYNAST_REASON
		}
		# House head
		modifier = {
			add = 25
			NOT = { scope:recipient.dynasty.dynast = scope:actor }
			scope:recipient.house.house_head = scope:actor
			desc = ET_AI_HOUSE_HEAD_REASON
		}
		# Opinion Factor
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
			desc = AI_OPINION_REASON
		}
		# Honor factor
		ai_value_modifier = {
			ai_boldness = -0.5
			max = 0
		}
	}

	ai_potential = {
		is_imprisoned = no
	}
	ai_target_quick_trigger = { adult = yes }
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		max = 15
	}
	ai_frequency = 36
}

bargain_fealty_interaction = {
	category = interaction_category_diplomacy
	desc = bargain_fealty_interaction_desc
	interface_priority = 60
	interface = call_ally
	special_interaction = call_ally_interaction
	popup_on_receive = yes
	pause_on_receive = yes

	icon = icon_vassal
	greeting = positive
	notification_text = bargain_fealty_interaction_notification

	cooldown_against_recipient = { years = 5 }

	is_shown = {
		# Actor is Involved in Struggle
		scope:actor = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
			}
			is_independent_ruler = yes
			is_at_war = yes
			any_character_war = {
				is_war_leader = prev
				primary_defender = prev
			}
			tier_difference = {
				target = scope:recipient
				value <= -1
			}
		}
		# Recipient is not at war with Actor
		scope:recipient = {
			any_neighboring_and_across_water_top_liege_realm_owner = { this = scope:actor }
			primary_title = { is_mercenary_company = no }
			NOR = {
				this = scope:actor
				is_at_war_with = scope:actor
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
				has_struggle_phase_parameter = unlocks_bargain_fealty_interaction
			}
		}
	}

	can_be_picked = {
		# Actor is war leader in chosen war
		exists = scope:target
		scope:target = {
			is_war_leader = scope:actor
			primary_defender = scope:actor
			custom_tooltip = {
				text = bargain_fealty_border_raid_tt
				NOT = { using_cb = fp2_border_raid }
			}
			custom_tooltip = {
				text = bargain_fealty_struggle_clash_tt
				NOT = { using_cb = county_struggle_cb }
			}
		}
		# Actor is not involved in a war involving Recipient
		joiner_not_already_in_another_war_with_any_target_war_participants_trigger = {
			WARRIOR = scope:actor
			JOINER = scope:recipient
		}
	}

	on_accept = {
		if = {
			limit = { exists = scope:target }
			# Add Recipient to Actor's war
			scope:target = {
				hidden_effect = { set_called_to = scope:recipient }
				if = {
					limit = { is_attacker = scope:actor }
					add_attacker = scope:recipient
				}
				else = { add_defender = scope:recipient }
			}
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = change
			}
			scope:actor = {
				change_liege = {
					liege = scope:recipient
					change = scope:change
				}
				resolve_title_and_vassal_change = scope:change
			}
			# Actor effects
			scope:actor = {
				stress_impact = {
					arrogant = medium_stress_impact_gain
					craven = medium_stress_impact_gain
				}
			}
			# Recipient effects
			scope:recipient = {
				stress_impact = {
					greedy = medium_stress_impact_gain
					craven = medium_stress_impact_gain
				}
			}
		}
		else = {
			scope:actor = {
				send_interface_toast = {
					title = war_ended_before_response
					left_icon = scope:recipient
				}
			}
		}
	}

	on_decline = {
		# Refusal notification
		scope:actor = { trigger_event = char_interaction.0236 }
	}

	ai_accept = {
		base = 25
		# Recipient would be very outnumbered
		modifier = {
			add = -75
			exists = scope:target
			scope:target = { fp2_bargain_fealty_war_outnumbered_trigger = yes }
			desc = BF_AI_OUTNUMBERED_REASON
		}
		# Actor is same culture as recipient
		modifier = {
			add = -10
			NOT = { scope:actor.culture = scope:recipient.culture }
			desc = BF_AI_DIFFERENT_CULTURE_REASON
		}
		# Actor is same faith as recipient
		modifier = {
			add = -15
			NOT = { scope:actor.faith = scope:recipient.faith }
			desc = BF_AI_DIFFERENT_FAITH_REASON
		}
		# Actor is de jure vassal of recipient
		modifier = {
			add = 25
			scope:actor = {
				any_held_title = { target_is_de_jure_liege_or_above = scope:recipient.primary_title }
			}
			desc = BF_AI_DE_JURE_REASON
		}
		# Actor is de jure vassal of recipient
		modifier = {
			add = 25
			scope:actor.dynasty = scope:recipient.dynasty
			desc = BF_AI_SAME_DYNASTY_REASON
		}
		# Too big to be vassal
		modifier = {
			add = -50
			scope:actor.realm_size >= fp2_bargain_fealty_half_realm_size_value
			desc = BF_AI_TOO_LARGE_REASON
		}
		# Opinion Factor
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
			desc = AI_OPINION_REASON
		}

		ai_value_modifier = {
			ai_boldness = 1
			max = 0
		}

		ai_value_modifier = {
			ai_greed = 1
			max = 0
		}

		modifier = {
			add = {
				value = ai_greed
				multiply = 2
			}
			ai_greed >= 1
			desc = AI_VALUE_MODIFIER_GREED
		}

		modifier = {
			add = {
				value = ai_boldness
				multiply = 2
			}
			NOT = { ai_boldness = 0 }
			desc = AI_VALUE_MODIFIER_BOLDNESS
		}
	}
	ai_will_do = {
		base = 5
		modifier = {
			add = 20
			any_character_war = {
				is_war_leader = prev
				primary_defender = prev
				NOR = {
					using_cb = fp2_border_raid
					using_cb = county_struggle_cb
				}
				casus_belli = {
					any_target_title = { holder = scope:actor }
				}
			}
		}
		modifier = {
			factor = 2
			any_character_war = {
				is_war_leader = prev
				primary_defender = prev
				NOR = {
					using_cb = fp2_border_raid
					using_cb = county_struggle_cb
				}
				war_defender_total_strength_value < war_attacker_total_strength_halved_value
			}
		}
	}
	ai_potential = { is_imprisoned = no }
	ai_target_quick_trigger = { adult = yes }
	ai_targets = { ai_recipients = neighboring_rulers }
	ai_frequency = 36
}

invite_foreign_ruler_to = {
	interface_priority = 30
	category = interaction_category_diplomacy
	common_interaction = yes
	desc = invite_foreign_ruler_to_desc
	icon = activity_feast
	greeting = positive
	notification_text = INVITE_FOREIGN_RULER_TO_NOTIFICATION
	popup_on_receive = yes
	ai_maybe = yes

	cooldown = { years = 1 }
	cooldown_against_recipient = { years = 5 }

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		# Scope:actor needs to either be involved in certain struggle types or else have a specific perk.
		scope:actor = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
			}
		}
		# Scope:recipient must be landed, and neither over or under scope:actor.
		scope:recipient = {
			any_character_struggle = {
				involvement = involved
				is_struggle_type = juche_struggle
			}
			is_landed = yes
			NOR = {
				any_liege_or_above = { this = scope:actor }
				any_vassal_or_below = { this = scope:actor }
			}
		}
	}

	is_valid_showing_failures_only = {
		# Scope:actor must be an available adult.
		scope:actor = { is_available_adult = yes }
		# Scope:recipient must be at least available.
		scope:recipient = { is_available_adult = yes }
		# Make sure that scope:actor is going into this with a clean, no-recent/active/forbidden hostilities mindset.
		scope:actor = {
			NOT = {
				is_at_war_with = scope:recipient
				# Involved characters can't be on opposite sides in an active war.
			}
		}

		# Verify that you can start one of the decision
		custom_description = {
			text = no_activity_available
			scope:actor = {
			OR = {
					can_execute_decision = start_hunt_decision
					can_execute_decision = host_feast_decision
				}
			}
		}

	}

	on_accept = {
		# Notifications with most effects.
		if = {
			limit = { scope:invite_to_hunt = yes }
			scope:actor = {
				set_variable = {
					name = special_guest
					value = scope:recipient
				}
				show_as_tooltip = {
					remove_short_term_gold = hunt_activity_cost
				}
				send_interface_toast = {
					title = invited_to_hunt.accept.actor.tt
					left_icon = scope:recipient
					progress_towards_friend_effect = {
						REASON = friend_invited_to_hunt
						CHARACTER = scope:recipient
						OPINION = 0
					}
					custom_tooltip = invite_foreign_ruler_to.hunt.tooltip
					execute_decision = start_hunt_decision
				}
			}
			scope:recipient = {
				send_interface_toast = {
					title = invited_to_hunt.accept.recipient.tt
					left_icon = scope:actor
				}
			}
		}
		else_if = {
			limit = { scope:invite_to_feast = yes }
			scope:actor = {
				set_variable = {
					name = special_guest
					value = scope:recipient
				}
				show_as_tooltip = {
					remove_short_term_gold = feast_activity_cost
				}
				send_interface_toast = {
					title = invited_to_feast.accept.actor.tt
					left_icon = scope:recipient
					progress_towards_friend_effect = {
						REASON = friend_invited_to_feast
						CHARACTER = scope:recipient
						OPINION = 0
					}
					custom_tooltip = invite_foreign_ruler_to.feast.tooltip
					execute_decision = host_feast_decision
				}
			}
			scope:recipient = {
				send_interface_toast = {
					title = invited_to_feast.accept.recipient.tt
					left_icon = scope:actor
				}
			}
		}
	}

	on_decline = {
		# Scope:actor gains some stress over the whole ordeal.
		scope:actor = {
			send_interface_toast = {
				title = invite_foreign_ruler_to.decline.actor.tt
				left_icon = scope:recipient
				add_prestige = medium_prestige_loss
			}
		}
		# Scope:actor loses opinion of scope:recipient.
		scope:recipient = {
			send_interface_toast = {
				title = invite_foreign_ruler_to.decline.recipient.tt
				left_icon = scope:actor
				reverse_add_opinion = {
					target = scope:actor
					modifier = refusal_opinion
					opinion = -50
				}
			}
		}
	}

	# Send Options
	## Invite to Hunt
	send_option = {
		is_valid = {
			scope:actor = {
				can_execute_decision = start_hunt_decision
			}
			# as an AI, don't invite human players to Hunt as we are lacking interesting content
			trigger_if = {
				limit = { scope:actor = { is_ai = yes } }
				scope:recipient = { is_ai = yes }
			}
		}
		flag = invite_to_hunt
		starts_enabled = { always = yes }
		localization = "INVITE_TO_HUNT"
	}
	## Invite to Feast
	send_option = {
		is_valid = {
			scope:actor = {
				can_execute_decision = host_feast_decision
			}
		}
		flag = invite_to_feast
		starts_enabled = { always = yes }
		localization = "INVITE_TO_FEAST"
	}
	# AI
	## Standard Acceptance stuff
	ai_accept = {
		# Try to make it 0 for most interactions.
		base = 0

		# more likely if lower rank than actor
		modifier = {
			add = 20
			scope:actor.primary_title.tier > primary_title.tier
			desc = RANK_DIFFERENCE_REASON
		}

		# less likely if that's the opposite
		modifier = {
			add = -20
			scope:actor.primary_title.tier < primary_title.tier
			desc = RANK_DIFFERENCE_REASON
		}

		# AI take opinion into account
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1
			desc = AI_OPINION_REASON
		}

		# sociability plays a lot as well
		ai_value_modifier = {
			ai_sociability = 1
		}

		# is rival or nemesis
		modifier = {
			add = -50
			has_relation_rival = scope:actor
			desc = WE_ARE_RIVALS
		}

		modifier = {
			add = -100
			has_relation_nemesis = scope:actor
			desc = WE_ARE_NEMESES
		}


		# is friend
		modifier = {
			add = 25
			has_relation_friend = scope:actor
			desc = WE_ARE_FRIENDS
		}


		# is best friend
		modifier = {
			add = 50
			has_relation_best_friend = scope:actor
			desc = WE_ARE_BEST_FRIENDS
		}

		modifier = {
			add = 100
			OR = {
				has_relation_lover = scope:actor
				has_relation_soulmate = scope:actor
			}
			desc = WE_ARE_LOVERS
		}

		# hunters love to hunt
		modifier = {
			add = 25
			scope:invite_to_hunt = yes
			has_trait_rank = {
				trait = lifestyle_hunter
				rank > 0
			}
			desc = AI_RELEVANT_TRAITS
		}

		# reveler loves feasts
		modifier = {
			add = 25
			scope:invite_to_feast = yes
			has_trait_rank = {
				trait = lifestyle_reveler
				rank > 0
			}
			desc = AI_RELEVANT_TRAITS
		}

		# Struggle agenda
		modifier = {
			desc = AI_STRUGGLE_INTENT
			scope:invite_to_feast = yes
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
					phase_has_catalyst = catalyst_invite_diff_faith_culture_to_feast
				}
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
					phase_has_catalyst = catalyst_invite_diff_faith_culture_to_feast
				}
			}
			NAND = {
				scope:actor.faith = scope:recipient.faith
				scope:actor.culture = scope:recipient.culture
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							has_character_flag = agenda_towards_deescalation
						}
					}
					add = 100
				}
				else_if = {
					limit = {
						scope:actor = {
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -100
				}
			}
		}
	}
	## Performance-enhancement
	ai_potential = {
		is_landed = yes
		is_available_at_peace_ai_adult = yes
		is_imprisoned = no
		# Matches the regular minimum triggers.
		OR = {
			any_character_struggle = { involvement = involved }
		}
		short_term_gold > standard_activity_cost
	}

	ai_target_quick_trigger = { adult = yes }
	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		max = 10
	}
	## Frequency
	ai_frequency = 60
	ai_will_do = {
		base = 0

		# sociability plays a lot as well
		ai_value_modifier = {
			ai_sociability = 1
		}

		# hunters love to hunt
		modifier = {
			add = 25
			scope:invite_to_hunt = yes
			has_trait_rank = {
				trait = lifestyle_hunter
				rank > 0
			}
		}

		# small boost if no firends
		modifier = {
			add = 25
			num_of_relation_friend = 0
		}
		# reveler loves feasts
		modifier = {
			add = 25
			scope:invite_to_feast = yes
			has_trait_rank = {
				trait = lifestyle_reveler
				rank > 0
			}
		}

		# From Hunt decision
		ai_value_modifier = {
			ai_energy = 1
			ai_greed = -0.5
			ai_compassion = -0.5
		}

		modifier = {
			add = 10
			scope:invite_to_hunt = yes
			has_trait_rank = {
				trait = education_martial
				rank > 0
			}
		}
		modifier = {
			add = 10
			scope:invite_to_hunt = yes
			has_trait_rank = {
				trait = education_martial
				rank > 2
			}
		}

		modifier = {
			scope:invite_to_hunt = yes
			add = 35
			stress > low_stress
		}

		# Struggle agenda
		modifier = {
			scope:recipient = {
				any_character_struggle = {
					involvement = involved
				}
			}
			scope:actor = {
				any_character_struggle = {
					involvement = involved
				}
			}
			NAND = {
				scope:actor.faith = scope:recipient.faith
				scope:actor.culture = scope:recipient.culture
			}
			add = {
				value = 0
				if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_invite_diff_faith_culture_to_feast

							}
							has_character_flag = agenda_towards_escalation
						}
					}
					add = -100
				}
				else_if = {
					limit = {
						scope:actor = {
							any_character_struggle = {
								phase_has_catalyst = catalyst_invite_diff_faith_culture_to_feast
							}
						}
					}
					add = 100
				}
			}
		}
	}
}
# Called from code after history generation
# Empty scope
on_game_start = {
	events = {
		#Guaranteed historical artifacts fixed spawning
		debug_portraits.1 					# Debug portraits for animation testing
	}

	effect = {
		#Epidemics 3 months grace
		set_global_variable = {
			name = start_epidemic_grace
			value = yes
			months = 3
		}
		### INITIALIZE CULTURAL GROUPS ###
		every_culture_global = {
			fs_initialize_culture_effect = yes
		}
		### HRE SETUP ###
		if = {
			limit = { exists = title:e_hec.holder }
			title:e_hec.holder = {
				every_vassal = {
					limit = {
						vassal_contract_has_modifiable_obligations = yes
					}
					vassal_contract_decrease_obligation_level = feudal_government_taxes
					vassal_contract_decrease_obligation_level = feudal_government_levies
					set_vassal_contract_modification_blocked = no
				}
			}
			add_to_global_variable_list = {
				name = hre_elector_list
				target = title:c_iksan
			}
			add_to_global_variable_list = {
				name = hre_elector_list
				target = title:d_namwon
			}
			add_to_global_variable_list = {
				name = hre_elector_list
				target = title:c_gongju
			}
			add_to_global_variable_list = {
				name = hre_elector_list
				target = title:d_jeonju
			}
			add_to_global_variable_list = {
				name = hre_elector_list
				target = title:d_buyeo
			}
			add_to_global_variable_list = {
				name = hre_elector_list
				target = title:d_jeongeup
			}
			add_to_global_variable_list = {
				name = hre_elector_list
				target = title:d_nonsan
			}
			hre_elector_list_save_effect = yes
		}

		### RELIGIOUS THINGS ###
		# Set up Holy Site Buildings to be buildable in Holy Sites
		religion:islam_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_mosque_01
					}
				}
			}
		}
		every_religion_global = {
			limit = {
				OR = {
					this = religion:christianity_religion
					this = religion:protestant_religion
				}
			}
		every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_cathedral_01
					}
				}
			}
		}
		religion:buddhism_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_indian_grand_temple_01
					}
				}
			}
		}		
		every_religion_global = {
			limit = {
				is_in_family = rf_pagan
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_pagan_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_other_grand_temple_01
					}
				}
			}
		}

		# Pagans that start pre-reformed
		## Bon has already been reformed into new bon.
		#faith:old_bon = { 
		#	set_variable = { name = has_been_reformed }
		#}

		# Mark some faiths to block conversion till specific decisions are taken.
		
		### GAME RULE: EXTRA ADMINS
		apply_historic_administrative_game_rule_effect = yes
		
		### UNIVERSITIES ###
		#title:b_fes.title_province = { add_special_building_slot = generic_university }
		title:b_65.title_province = { add_special_building_slot = generic_university } # 인하대
		title:b_119.title_province = { add_special_building_slot = generic_university } # 전북대
		title:b_564.title_province = { add_special_building_slot = generic_university } # 전남대
		title:b_460.title_province = { add_special_building_slot = generic_university } # 제주대
		title:b_1424.title_province = { add_special_building_slot = generic_university } # 아주대
		title:b_1619.title_province = { add_special_building_slot = generic_university } # 강원대
		
		
		### COA ###
		
		### GRANDEUR ###
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}
		
		### REGENCIES ###
		## If you start as a child, incapable, or imprisoned, you get a regency.
		every_ruler = {
			limit = {
				OR = {
					is_adult = no
					is_incapable = yes
					is_imprisoned = yes
					government_has_flag = government_is_clan
				}
			}
			# We don't want to check over so many characters *twice*, so we check again inside the block to determine what type of regency to put 'em in.
			## Temporary Regencies.
			if = {
				limit = { is_imprisoned = yes }
				trigger_event = {
					id = diarchy.0001
					delayed = yes
				}
			}
			if = {
				limit = { government_has_flag = government_is_clan }
			}
			## Entrenched Regencies.
			else = {
				trigger_event = {
					id = diarchy.0011
					delayed = yes
				}
			}
		}
		# Sort custom regencies.
		# LEGITIMACY CONFIG
		## 867.
		if = {
			limit = { game_start_date = 2444.1.1 }
			## 정일남, 임요한 버프
			character:4169 = {
				add_legitimacy = major_legitimacy_gain
			}
			character:9008 = {
				add_legitimacy = major_legitimacy_gain
			}
		}
		every_independent_ruler = {
			limit = { government_has_flag = government_is_military }
			every_vassal_or_below = {
				limit = {
					primary_title.tier >= tier_county
					OR = {
						government_has_flag = government_is_clan
						government_has_flag = government_is_feudal
					}
				}
				change_government = military_government
			}
		}
		
		# Admin - Let's give existing governors the Governor trait on game start
		every_independent_ruler = {
			limit = { government_allows = administrative }
			every_vassal = {
				limit = {
					is_governor = yes
					NOT = { has_trait = governor }
				}
				add_trait = governor
				add_trait_xp = {
					trait = governor
					value = {
						add = primary_title.title_held_years
						multiply = 2
					}
				}
			}
		}
	}
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		if = {
			limit = { NOT = { has_global_variable = startup_settings } }
			set_global_variable = { name = election_date value = 2445 }
			set_global_variable = { name = election_term value = 1 }
			set_global_variable = { name = startup_settings value = yes }
			set_global_variable = { name = imperial_authority value = 20.00 }
		}
		# Make sure that Realm Priests are landed theocrats where it makes sense
		every_ruler = {
			limit = {
				highest_held_title_tier >= tier_duchy
			}
			if = {
				limit = {
					exists = cp:councillor_court_chaplain
					cp:councillor_court_chaplain = {
						is_ruler = no
					}
					faith = { has_doctrine = doctrine_clerical_succession_spiritual_fixed_appointment }
					any_vassal = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
				}
				random_vassal = {
					limit = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
					weight = {
						base = 1
						modifier = {
							add = 1000
							faith.religious_head ?= this
						}
						modifier = {
							add = learning
						}
						modifier = {
							add = primary_title.tier
						}
					}
					liege = {
						assign_councillor_type = {
							type = councillor_court_chaplain
							remove_existing_councillor = yes
							target = prev
						}
					}
				}
			}
			if = {
				limit = {
					is_landless_adventurer = yes
				}
				if = { limit = { has_realm_law = crown_authority_0 } remove_realm_law = crown_authority_0 }
			}
		}
	
		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}
		else = { # So that children 10+ starts with a sexuality
			child_sexuality_distribution_effect = yes
		}
		
		### GAME RULE: EXTRA ADMINS
		## We'll be doing some excessive triggers below in a bid to lightly future-proof + error-spam mods less, don't worry about it.
		### We handle players after the lobby.
		# Historic chars.
		# Nomadic Empire
		#every_independent_ruler = {
		#	limit = {
		#		government_has_flag = government_is_nomadic
		#	}
		#	create_noble_family_effect = yes
		#	domicile ?= {
		#		set_up_domicile_estate_effect = yes
		#	}
		#	every_vassal_or_below = {
		#		limit = {
		#			government_has_flag = government_is_nomadic
		#			primary_title.tier >= tier_duchy
		#			house.house_head = {
		#				NOT = {
		#					any_held_title = { is_noble_family_title = yes }
		#				}
		#			}
		#		}
		#		create_noble_family_effect = yes
		#		domicile ?= {
		#			set_up_domicile_estate_effect = yes
		#		}
		#	}
		#}
		
		# PRK - Administrative Republic
		#title:k_prk.holder = {
		#	create_noble_family_effect = yes
		#	domicile ?= { set_up_domicile_estate_effect = yes }
		#	every_vassal = {
		#		limit = {
		#			government_has_flag = government_is_secular_republic
		#			house.house_head = {
		#				NOT = {
		#					any_held_title = { is_noble_family_title = yes }
		#				}
		#			}
		#		}
		#		create_noble_family_effect = yes
		#		domicile ?= {
		#			set_up_domicile_estate_effect = yes
		#		}
		#	}
		#}
		apply_historic_administrative_game_rule_effect = yes
		if = {
			limit = { has_dlc_feature = roads_to_power }
			if = {
				limit = { has_game_rule = donghae_administrative }
				culture:sikhotealin = { save_scope_as = ignore_culture }
				title:e_donghae.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
			}
		}
		
		#title:k_andong.holder ?= { convert_to_administrative_from_feudalism_game_start_effect = yes }
		# Players.
		if = {
			limit = { has_dlc_feature = roads_to_power }
			if = {
				limit = {
					NOT = { has_game_rule = historicity_extra_admin_player_wherever_gameplay_not_administrative }
				}
				if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_always }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
				else_if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_with_august_trait }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
							has_trait = august
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
			}
		}
		
		# Give Ruler Designer characters regencies.
		every_in_global_list = {
			variable = rd_chars_needing_regencies
			trigger_event = diarchy.0011
			# Aaaand clean the list.
			save_temporary_scope_as = char_temp
			remove_list_global_variable = {
				name = rd_chars_needing_regencies
				target = scope:char_temp
			}
		}

		### ACHIEVEMENT: FROM RAGS TO RICHES
		every_player = {
			trigger_event = startup.1
		}
		title:e_donghae.holder = {
			trigger_event = donghae.1
		}
		title:e_north_korea.holder = {
			trigger_event = sun_from_north.1
		}
		title:c_hoengseong.holder = {
			trigger_event = gw_mgga.1
		}
		every_player = {
			limit = {
				top_liege = character:9008
			}
			trigger_event = yalu_civil_war.1
		}
		title:e_yalu.holder = {
			trigger_event = {
				id = yalu_civil_war.2
				days = 7
			}
		}
		every_county = {
			fs_initialize_technologies_effect = yes
		}
		fs_tech_init = yes
		### PRESTIGE/PIETY/RENOWN ON START
		character:1 = { add_prestige = 1500 }
		character:2 = { add_prestige = 1000 }
		title:k_gorlos.holder = { add_prestige = 2000 }
		### HOLD COURT STARTING GRACE
		every_character_with_royal_court = {
			set_variable = {
				name = hold_court_cooldown
	 			days = standard_hold_court_cooldown_time
	 		}
		}

		
		#Set starting cultural acceptance
		# Custom ruler under the HRE should have lowered feudal obligations
		if = {
			limit = { exists = title:e_hec.holder }
			title:e_hec.holder = {
				every_vassal = {
					limit = {
						is_ai = no
						vassal_contract_has_modifiable_obligations = yes
					}
					vassal_contract_decrease_obligation_level = feudal_government_taxes
					vassal_contract_decrease_obligation_level = feudal_government_levies
					set_vassal_contract_modification_blocked = no
				}
			}
		}
		### CE1 LEGITIMACY SETUP ###
		every_ruler = {
			limit = {
				exists = dynasty
				highest_held_title_tier >= tier_county
				# Exclude unplayable for now
				NOR = {
					government_has_flag = government_is_republic
					government_has_flag = government_is_theocracy
				}
				is_landed = yes
			}
			add_legitimacy = base_legitimacy_value
		}
		character:801 = {
			add_legitimacy = -300
		}
		### EP3 SETUP ###
		if = {
			limit = { has_ep3_dlc_trigger = yes }
			### EP3 LAAMP SETUP ###
			# Resources.
			every_independent_ruler = {
				limit = { is_landless_adventurer = yes }
				# Cash.
				add_gold = {
					value = {
						value = 0
						add = prestige
						add = piety
						divide = 10
					}
				}
				save_temporary_scope_as = adventurer_scope
				# Set CoA
				primary_title = { set_coa = scope:adventurer_scope.house }
				# Cleanup characters
				every_councillor = {
					if = {
						limit = {
							NOR = {
								has_council_position = councillor_court_chaplain
								has_council_position = councillor_spouse
							}
						}
						scope:adventurer_scope = {
							fire_councillor = prev
						}
						remove_opinion = {
							modifier = fired_from_council_opinion
							target = scope:adventurer_scope
						}
					}
					else_if = {
						limit = {
							NOR = {
								is_close_or_extended_family_of = prev
								has_relation_lover = prev
								has_relation_friend = prev
								is_consort_of = prev
								has_council_position = councillor_spouse
							}
						}
						death = {
							death_reason = death_vanished
						}
					}
				}
				# Evict everyone who isn't your family from your camp.
				every_courtier = {
					limit = {
						prev = { save_temporary_scope_as = char_temp }
						NOR = {
							dynasty ?= scope:char_temp.dynasty
							is_imprisoned_by = scope:char_temp
							# Plus any relations, who are presumably meant to be here.
							has_important_relationship_with_character_trigger = { CHARACTER = scope:char_temp }
							# Catch bastards and such that may be left over.
							is_close_or_extended_family_of = scope:char_temp
						}
					}
					move_to_pool = yes
				}
				# Courtiers.
				trigger_event = ep3_laamps.1001
			}
			# Starting camp purposes.
			every_independent_ruler = {
				limit = { is_landless_adventurer = yes }
				# C... food.
				domicile = { change_provisions = starting_provisions_value }
				# Contracts
				if = {
					limit = { is_ai = no }
					# Set up additional firing contracts.
					player_adventurer_contract_generation_on_wait_in_place_effect = yes
					#generate contracts if you are far away from your previous location
					player_adventurer_contract_generation_on_domicile_moved_effect = yes
				}
				else = {
					create_story = { type = story_adventurer_ai }
					trigger_event = {
						on_action = on_adventurer_ai_new_employer_arrival
						days = { 10 30 }
					}
				}
				# Sort our starting flavourisation.
				if = {
					limit = { has_realm_law = camp_purpose_mercenaries }
					set_variable = flavourise_camp_purpose_mercenaries
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_wanderers }
					set_variable = flavourise_camp_purpose_wanderers
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_scholars }
					set_variable = flavourise_camp_purpose_scholars
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_explorers }
					set_variable = flavourise_camp_purpose_explorers
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_brigands }
					set_variable = flavourise_camp_purpose_brigands
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_legitimists }
					set_variable = flavourise_camp_purpose_legitimists
				}
				# And tally our numbers for performance purposes.
				add_to_global_variable_list = {
					name = laamps_tally
					target = this.primary_title
				}
			}
			### EP3 ADMIN SETUP ###
			every_independent_ruler = {
				limit = { government_allows = administrative }
				save_scope_as = top_liege
				### EP3 NOBLE FAMILIES & DOMICILE SETUP ###
				random_held_title = { # May be removed once every_noble_family includes liege (TIT-51212)
					limit = { is_noble_family_title = yes }
					set_coa = scope:top_liege.house
				}
				every_noble_family = {
					# Ensure Noble Family CoA match House
					set_coa = holder.house
					# Ensure holders of historical noble family titles are the default house heads
					holder ?= {
						save_scope_as = nf_holder
						if = {
							limit = { is_landed = yes }
							capital_province = { save_scope_as = domicile_location }
						}
						# TODO_CD_EP3: remove once TIT-51212 is resolved and confirmed
						house ?= {
							if = {
								limit = { house_head != scope:nf_holder }
								set_house_head = scope:nf_holder
							}
						}
					}
					set_color_from_title = scope:nf_holder.capital_county
				}
			}
		}
	}

	events = {
		game_rule.1000	#Autopopulate families.
		historical_artifacts.0023			# Historical Artifacts Generator
	}
}

#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	events = {
	}

	# remove existing claims
	effect = {
		scope:landed_title = {
			every_claimant = {
				remove_claim = prev
			}
		}
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	effect = {
		scope:title = { update_dynamic_coa = yes }
		
		if = {
			limit = {
				scope:title = { is_holy_order = yes }
				NOT = { has_trait = order_member }
				government_has_flag = government_is_holy_order
			}
			add_trait = order_member
		}

		#Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}
		
		# Grandeur in elective realms
		if = {
			limit = {
				exists = var:previous_holder_grandeur_value
				has_royal_court = yes
			}
			hidden_effect = {
				change_current_court_grandeur = -100 # Reset to 0
				change_current_court_grandeur = var:previous_holder_grandeur_value
				remove_variable = previous_holder_grandeur_value
			}
		}

		# Petition allowed again
		if = {
			limit = { has_variable = petition_title_cooldown }
			remove_variable = petition_title_cooldown
		}

		# If a player is on their way to pay homage, invalidate.
		if = {
			limit = {
				exists = scope:previous_holder
				any_player = { var:homage_liege_scope ?= scope:previous_holder }
			}
			every_player = {
				limit = {
					var:homage_liege_scope ?= scope:previous_holder
					NOT = { has_character_flag = currently_invalidating_petition_liege_travel }
				}
				current_travel_plan = { cancel_travel_plan = yes }
				trigger_event = pay_homage.0601
				add_character_flag = {
					flag = currently_invalidating_petition_liege_travel
					days = 1
				}
			}
		}

		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					any_character_artifact = {
						has_variable = artifact_succession_title #Is this an artifact that should follow a title?
						var:artifact_succession_title = { is_title_created = yes } #Does the title the artifact should follow exist?
						var:artifact_succession_title = scope:title #Scope title is the artifact title
					}
				}
			}
			scope:previous_holder = {
				every_character_artifact = {
					limit = {
						has_variable = artifact_succession_title #Is this an artifact that should follow a title?
						var:artifact_succession_title = { is_title_created = yes } #Does the title the artifact should follow exist?
						var:artifact_succession_title = scope:title #Scope title is the artifact title
					}
					if = {
						limit = {
							OR = {
								scope:transfer_type = flag:conquest
								scope:transfer_type = flag:conquest_holy_war
								scope:transfer_type = flag:conquest_claim
								scope:transfer_type = flag:conquest_populist
								scope:transfer_type = flag:abdication
								scope:transfer_type = flag:usurped
								scope:transfer_type = flag:revoked
								scope:transfer_type = flag:faction_demand
							}
						}
						set_owner = {
							target = root
							history = {
								type = conquest
								actor = scope:previous_holder
								recipient = root
								location = scope:previous_holder.location
							}
						}
					}
					else = {
						set_owner = {
							target = root
							history = {
								type = inherited
								recipient = root
							}
						}
					}
				}
			}
		}


		#Struggle Catalyst
		if = {
			limit = {
				# We are only interested in the title within the Struggle Region
				title:e_spain = {
					any_in_de_jure_hierarchy = {
						this = 	scope:title
					}
				}
				# Only for usurpation
				scope:transfer_type = flag:usurped

				root = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_usurp_title
							CHAR = root
						}
					}
				}
			}
			root = {
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_usurp_title
							CHAR = root
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_usurp_title
						character = root
					}
				}
			}
		}
		
		# Memories
		# Ascended to the throne
		if = {
			limit = {
				OR = {
					is_ruler = no
					highest_held_title_tier <= scope:title.tier
				}
			}
			
			root = {
				create_character_memory = {
					type = ascended_throne_memory
				}
				
				scope:new_memory = {
					save_scope_as = ascended_throne_memory
					set_variable = childhood_memory
					set_variable = {
						name = landed_title
						value = scope:title
					}
				}
			}
		}
		
		if = {
			limit = {
				scope:transfer_type = flag:created
				is_alive = yes
			}
			every_vassal = {
				limit = {
					has_vassal_stance = courtly
				}
				if = {
					limit = {
						scope:title.tier = tier_duchy
					}
					add_opinion = {
						target = root
						modifier = courtly_title_creation_opinion
						opinion = 10
					}
				}
				else = {
					add_opinion = {
						target = root
						modifier = courtly_title_creation_opinion
						opinion = 30
					}
				}
			}
		}
	}
	events = {
		religious_decision.0312		# Base game: new holder of a county with a runestone
		fp1_other_decisions.0113	# FP1: new holder of a county with a runestone
		delay = { days = 1 }
		realm_maintenance.2001		#Big notification about inheriting emperor tier title	}
}

# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {
		delay = { days = 1 }
		# Try to end inherited entrenched regencies automatically — we need to launder this by a day to make sure the AI realises they've inherited a diarchy.
		diarchy.0113
	}
	effect = {
	}
}

# A title is usurped by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Shouldn't be dead
on_title_gain_usurpation = {
	events = {
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	events = {
	}

	effect = {
		#Make sure nobody ever has only the Kingdom of Fashion
		if = {
			limit = {
				scope:title = { tier = tier_kingdom }
				has_title = title:k_fashion
				NOT = {
					any_held_title = { # Only trigger if you don't have any kingdom titles other than Fashion and the kingdom you just lost. Double negative is confusing but it's the only way I could think to script it
						tier = tier_kingdom
						NOT = { this = title:k_fashion }
						NOT = { this = scope:title }
					}
				}
			}
			destroy_title = title:k_fashion
		}

		#To remove concubines if a character becomes unlanded
		if = {
			limit = {
				is_landed = no
				any_concubine = { count >= 1 }
			}
			every_concubine = {
				root = {
					remove_concubine = prev
				}
			}
		}

		#Apply loss of stress to the Rivals
		if = {
			limit = {
				scope:title.tier >= tier_county
				OR = {
					scope:transfer_type = flag:conquest
					scope:transfer_type = flag:conquest_holy_war
					scope:transfer_type = flag:conquest_claim
					scope:transfer_type = flag:conquest_populist
					scope:transfer_type = flag:abdication
					scope:transfer_type = flag:usurped
					scope:transfer_type = flag:revoked
					scope:transfer_type = flag:faction_demand
				}
			}
			root = {
				save_scope_as = actor
			}
			every_relation ={
				type = rival

				send_interface_message = {
					type = event_generic_neutral
					title = msg_rival_dethroned
					left_icon = scope:actor
					right_icon = scope:title

					custom_tooltip = msg_rival_dethroned_desc

					stress_impact = { 
						base = medium_stress_loss
						vengeful = medium_stress_loss
					}
				}
			}
		}
		
		# Memories
		# Lost a significant title
		if = {
			limit = {
				scope:title.tier >= highest_held_title_tier
				exists = scope:new_holder
			}
			
			root = {
				create_character_memory = {
					type = lost_title_memory
					
					participants = {
						new_holder = scope:new_holder
					}
				}
				
				scope:new_memory = {
					save_scope_as = lost_title_memory
					set_variable = {
						name = landed_title
						value = scope:title
					}
				}
			}
		}
	}
}

# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
# scope:transfer_type = flag:inheritance or none
on_explicit_claim_gain = {
	effect = {
		# Struggle Catalyst
		if = {
			limit = {
				NOT = { scope:transfer_type = flag:inheritance }

				title:e_spain = {
					any_in_de_jure_hierarchy = {
						this = 	scope:title
					}
				}
				root = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_gain_claim_on_title
							CHAR = root
						}
					}
				}
			}
			root = {
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_gain_claim_on_title
							CHAR = root
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_gain_claim_on_title
						character = root
					}
				}
			}
		}
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	effect = {
	}
}

# A title change makes the character rank up in the landed tiers (eg Duke -> King)
# root = character ranking up
# scope:title = old primary title
on_rank_up = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		add_achievement_flag_effect = { FLAG = achievement_moving_up_in_the_world_flag }
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Make a note of ranking up for stele purposes.
		if = {
			limit = {
				# DLC check.
				has_fp1_dlc_trigger = yes
				# Is the culture eligible?
				fp1_can_raise_stele_trigger = yes
				# Aaaaand, for balance reasons, were they landed already?
				exists = scope:title
			}
			set_variable = {
				name = recent_rank_increase
				value = root.primary_title
				years = 5
			}
		}
		# Remove any rank-inappropriate modifiers (e.g., baron buffs).
		remove_character_modifier = mandate_baronial_troops_trained_modifier
		remove_character_modifier = mandate_baronial_troops_half_trained_modifier
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		if = {
			limit = {
				NOR = {
					has_trait = humble
					has_trait = content
					has_trait = generous
				}
			}
			add_character_flag = {
				flag = make_suicide_available
				years = 5
			}
			set_variable = {
				name = rank_demoted
				value = yes
			}
		}
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Inform hostage havers
		if = {
			limit = {
				any_home_court_hostage = { count >= 1 }
			}
			save_scope_as = home_court
			every_home_court_hostage = {
				save_scope_as = hostage
				warden = {
					save_scope_as = warden
					trigger_event = { id = bp2_hostage_system.0410 days = 5 }
				}
			}
		}
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained = {
	effect = {
		# Struggle Catalyst
		if = {
			limit = {
				# Verify if vassal used to be independent
				NOT = { exists = scope:old_liege }
				root = {
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_vassalize_independent_ruler
							CHAR = scope:vassal
						}
					}
				}
			}
			root = {
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_vassalize_independent_ruler
							CHAR = scope:vassal
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_vassalize_independent_ruler
						character = root
					}
				}
			}
		}
	}
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
}

# A baron is found or created for a title, E.G., due to the player using the "Give to Low Noble" action
# No transfer type here; it's always a grant
# root = the baron
# scope:liege = the person who wanted them created
# scope:title = the barony
on_baron_found_or_created_for_title = {
	effect = {
		add_opinion = {
			target = scope:liege
			modifier = received_title_barony
		}
	}
}

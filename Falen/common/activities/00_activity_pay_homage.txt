activity_pay_homage = {
	expiration_days = 30
	solo = yes
	color = { 0.353906 0.967188 0.205469 1 }
	start_immediately = yes
	valid = {
		activity_owner = { pay_homage_valid_trigger = yes }
	}
	on_spawn = {
		invite_character_to_activity = activity_owner
		accept_invitation_for_character = activity_owner
	}
	on_activate = {
		activity_owner = {
			save_scope_as = homage_vassal
			liege = { save_scope_as = homage_liege }
			switch = {
				trigger = scope:homage_vassal.var:homage_type
				flag:homage_submission = {} #Submission
				flag:homage_gold = {} #Gold
				flag:homage_hook = {} #Favor
				flag:homage_contract = { # Contract
					scope:homage_vassal = {
						if = { # Levies
							limit = {
								vassal_contract_obligation_level:feudal_government_levies < vassal_contract_obligation_level:feudal_government_taxes
								vassal_contract_obligation_level_can_be_increased = feudal_government_levies
							}
							set_variable = {
								name = pay_homage_contract_type
								value = 0
							}
						}
						else_if = { # Gold
							limit = {
								vassal_contract_obligation_level:feudal_government_taxes < vassal_contract_obligation_level:feudal_government_levies
								vassal_contract_obligation_level_can_be_increased = feudal_government_taxes
							}
							set_variable = {
								name = pay_homage_contract_type
								value = 1
							}
						}
						else = {
							if = { # Gold
								limit = { vassal_contract_obligation_level_can_be_increased = feudal_government_taxes }
								set_variable = {
									name = pay_homage_contract_type
									value = 1
								}
							}
							else = { # Levies
								set_variable = {
									name = pay_homage_contract_type
									value = 0
								}
							}
						}
					}
				} 
			}
			scope:homage_liege = {
				every_courtier = {
					limit = { is_close_family_of = prev }
					add_to_list = pay_homage_family_list
				}
				every_spouse = {
					limit = { is_close_family_of = prev }
					add_to_list = pay_homage_family_list
				}
				if = {
					limit = {
						scope:homage_vassal.attraction >= 10
						any_in_list = {
							list = pay_homage_family_list
							is_available_ai_adult = yes
							can_start_scheme = {
								type = seduce
								target = scope:homage_vassal
							}
							NOT = { has_trait = chaste }
							is_attracted_to_gender_of = scope:homage_vassal
						}
					}
					random_in_list = {
						list = pay_homage_family_list	
						limit = {
							is_available_ai_adult = yes
							is_attracted_to_gender_of = scope:homage_vassal
						}
						weight = {
							modifier = {
								factor = 2
								has_trait = lustful
							}
							modifier = {
								factor = 0.5
								OR = {
									AND = {
										is_male = yes
										scope:homage_vassal = { is_male = yes }
									}
									AND = {
										is_female = yes
										scope:homage_vassal = { is_female = yes }
									}
								}
								NOT = {
									faith = { has_doctrine = doctrine_homosexuality_accepted }
								}
							}
							modifier = {
								factor = 2
								age <= 30
							}
							modifier = {
								factor = 4
								is_married = no
							}
							modifier = {
								factor = 2
								is_child_of = scope:homage_liege
							}
							modifier = {
								factor = 2
								is_parent_of = scope:homage_liege
							}
							modifier = {
								factor = 2
								is_spouse_of = scope:homage_liege
							}
						}
						save_scope_as = homage_infatuation
						start_scheme = {
							type = seduce
							target = scope:homage_vassal
						}
					}
				}
				trigger_event = pay_homage.0001
			}
		}
	}
	on_complete = {
		activity_owner = {
			# Always
			if = {
				limit = { has_variable = homage_type }
				remove_variable = homage_type
			}
			# Contract
			if = {
				limit = { has_variable = pay_homage_contract_type }
				remove_variable = pay_homage_contract_type
			}
		}
	}
	on_expire = {
		activity_owner = {
			save_scope_as = homage_vassal
			liege = { save_scope_as = homage_liege }
			trigger_event = pay_homage.0009 # Inform player that their liege refused to see them.
			if = {
				limit = { scope:pay_homage_contract = yes }
				hidden_effect = { set_vassal_contract_modification_blocked = no }
			}
		}
	}
	on_invalidated = {
		activity_owner = {
			if = {
				limit = { exists = var:homage_liege_scope }
				var:homage_liege_scope = { save_scope_as = homage_liege }
				trigger_event = pay_homage.0601
			}
		}
		complete_activity = yes
	}
}
